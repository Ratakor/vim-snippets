snippet main
	int
	main(int argc, char *argv[])
	{
		$0
	}
snippet mainn
	int
	main(void)
	{
		$0
	}
snippet #inc
	#include <${1:stdio}.h>
snippet inc
	#include <${1:stdio}.h>
snippet Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"
snippet def
	#define
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif /* $1 */
snippet ifdef
	#ifdef ${1:FOO}
	${2:#define }
	#endif /* $1 */
snippet #if
	#if ${1:FOO}
	${0:${VISUAL}}
	#endif /* $1 */
snippet guard
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}
	#define $1
	$0
	#endif /* $1 */
snippet nocxx
	#ifdef __cplusplus
	extern "C" {
	#endif /* __cplusplus */
	$0
	#ifdef __cplusplus
	}
	#endif /* __cplusplus */
snippet if
	if (${1:1}) {
		${0:${VISUAL}}
	}
snippet ife
	if (${1:1}) {
		${2:${VISUAL}}
	} else {
		${0}
	}
snippet el
	else {
		${0:${VISUAL}}
	}
snippet elif
	else if (${1:1}) {
		${0:${VISUAL}}
	}
snippet t Ternary: `condition ? 1 : 0`
	${1:foo} ? ${2:1} : ${0:0}
snippet switch
	switch (${1:var}) {
	case ${2:x}:
		${3}
		${4:break;}${5}
	default:
		${6}
	}
snippet switchndef
	switch (${1:var}) {
	case ${2:x}:
		${3}
		${4:break;}${5}
	}
snippet case
	case ${1:x}:
		${2}
		${3:break;}
snippet ret
	return ${0};
snippet ex
	exit($0);
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
snippet wh
	while (${1:1}) {
		${0:${VISUAL}}
	}
snippet do
	do {
		${0:${VISUAL}}
	} while (${1:1});

snippet fund
	${1:void} ${2:function_name}(${3:void});
snippet fun
	${1:void}
	${2:function_name}(${3:void})
	{
		${4}
	}
snippet funD
	/**
	 * @brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * @param $3 ${4:Parameter description}
	 * @return ${5:Return parameter description}
	 */
	${6:void}
	${7:function_name}(${8:Type} ${3:Parameter})
	{
		${9}
	}

snippet td
	typedef ${1:int} ${2:MyCustomType};
snippet tds
	typedef struct ${2:$1} ${1:`vim_snippets#Filename('$1_t', 'name')`};
snippet st
	struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
		${2:Data}
	};
snippet stD
	/**
	 * @struct $1
	 * @brief ${3:Brief struct description}
	 *
	 * ${4:Detailed description}
	 */
	struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
		${2:Data} /*!< ${4:Description} */
	}${5: /* optional variable list */};
snippet enum
	enum ${1:name} { $0 };
snippet enumD
	/**
	 * @enum $1
	 *
	 * ${2:Detailed description}
	 */
	enum ${1:name} { $0 };
snippet tde
	/**
	 * @enum $2
	 *
	 * ${3:Detailed description}
	 */
	typedef enum {
		${1:Data}
	} ${2:foo};
snippet pr
	printf("${1:%s}\n"${2});
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});
snippet prd
	printf("${1:} = %d\n", $1);
snippet prf
	printf("${1:} = %f\n", $1);
snippet prx
	printf("${1:} = %${2}\n", $1);
snippet warn
	warn("${1:%s}");
snippet die
	die(${1:1}, "${2:%s}");
snippet asr
	assert($1);
snippet anl
	assert(${1:p} != NULL);
snippet fre
	free(${1:p});
snippet mlc
	${1:p} = malloc(sizeof(*$1));
snippet clc
	${1:p} = calloc(${3:nmemb}, sizeof(*$1));
snippet rlc
	${1:p} = realloc($1, ${2:size});
snippet rlca
	${1:p} = reallocarray($1, ${2:nmemb}, ${3:size});
snippet memd
	${1:np} = memdup(${2:p}, ${3:size});
snippet strd
	${1:p} = strdup(${2:s});
snippet strnd
	${1:p} = strndup(${2:s}, ${3:n});
